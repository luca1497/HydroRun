#import UIKit
#import MapKit

class ViewController: UIViewController, MKMapViewDelegate {

    @IBOutlet weak var mapView: MKMapView!

    override func viewDidLoad() {
        super.viewDidLoad()

        // Imposta la posizione iniziale della mappa
        let initialLocation = CLLocation(latitude: 37.7749, longitude: -122.4194)
        centerMapOnLocation(location: initialLocation)

        // Aggiungi un pin sulla mappa per rappresentare la posizione di partenza
        let startCoordinate = CLLocationCoordinate2D(latitude: 37.7749, longitude: -122.4194)
        let startAnnotation = MKPointAnnotation()
        startAnnotation.coordinate = startCoordinate
        startAnnotation.title = "Partenza"
        mapView.addAnnotation(startAnnotation)

        // Aggiungi un pin sulla mappa per rappresentare la posizione di destinazione
        let destinationCoordinate = CLLocationCoordinate2D(latitude: 37.7749, longitude: -122.4313)
        let destinationAnnotation = MKPointAnnotation()
        destinationAnnotation.coordinate = destinationCoordinate
        destinationAnnotation.title = "Destinazione"
        mapView.addAnnotation(destinationAnnotation)

        // Calcola e visualizza le indicazioni stradali
        calcolaIndicazioniStradali(start: startCoordinate, destination: destinationCoordinate)
    }

    func centerMapOnLocation(location: CLLocation) {
        let regionRadius: CLLocationDistance = 1000
        let coordinateRegion = MKCoordinateRegion(
            center: location.coordinate,
            latitudinalMeters: regionRadius,
            longitudinalMeters: regionRadius
        )
        mapView.setRegion(coordinateRegion, animated: true)
    }

    func calcolaIndicazioniStradali(start: CLLocationCoordinate2D, destination: CLLocationCoordinate2D) {
        let request = MKDirections.Request()
        request.source = MKMapItem(placemark: MKPlacemark(coordinate: start))
        request.destination = MKMapItem(placemark: MKPlacemark(coordinate: destination))
        request.requestsAlternateRoutes = false
        request.transportType = .automobile

        let directions = MKDirections(request: request)
        directions.calculate { [unowned self] (response, error) in
            guard let route = response?.routes.first else {
                if let error = error {
                    print("Errore nel calcolo delle indicazioni stradali: \(error.localizedDescription)")
                }
                return
            }

            // Aggiungi la route alla mappa
            self.mapView.addOverlay(route.polyline, level: .aboveRoads)

            // Imposta la visualizzazione della mappa in modo da includere la route
            let rect = route.polyline.boundingMapRect
            self.mapView.setRegion(MKCoordinateRegion(rect), animated: true)
        }
    }

    // MKMapViewDelegate
    func mapView(_ mapView: MKMapView, rendererFor overlay: MKOverlay) -> MKOverlayRenderer {
        if let polyline = overlay as? MKPolyline {
            let renderer = MKPolylineRenderer(polyline: polyline)
            renderer.strokeColor = UIColor.blue
            renderer.lineWidth = 3
            return renderer
        }
        return MKOverlayRenderer()
    }
}
